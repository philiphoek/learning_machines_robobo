weight_upper = 1
weight_lower = -1
# cross two individuals with probability CXPB
CXPB = 0.85
# mutate an individual with probability MUTPB
MUTPB = 0.15
# mu: Mean or :term:`python:sequence` of means for the gaussian addition mutation.
MU = 0
# sigma: Standard deviation or :term:`python:sequence` of standard deviations for the gaussian addition mutation.
SIGMA = 0.1
# indpb: Independent probability for each attribute to be mutated.
INDPB = 0.1
# tournsize: The number of individuals participating in each tournament.
TOURNSIZE = 4
###########
# DO NOT CHANGE
###########
NGEN = 10
npop = 30
RUNS = 2


n_hidden_neurons = 10
controller = robotController(robobo.SimulationRobobo().connect(address='127.0.0.1', port=19997))
number_of_sensors = 14
# left wheel and right wheel
number_of_actions = 2

# number of weights for multilayer with 10 hidden neurons
n_vars = (controller.number_of_sensors + 1) * controller.n_hidden_neurons + (controller.n_hidden_neurons + 1) * controller.number_of_actions

if controller.top_left == 1 or controller.top_right == 1:
    reward_for_seeing_object += 1

if controller.bottom_left == 1 or controller.bottom_right == 1:
    reward_for_seeing_object += 3

if controller.top_center == 1:
    reward_for_seeing_object += 2

if controller.bottom_center == 1:
    reward_for_seeing_object += 5

if controller.top_left == 0 and controller.top_center == 0 and controller.top_right == 0 and controller.bottom_left == 0 and controller.bottom_center == 0 and controller.bottom_right == 0:
    reward_for_seeing_object -= 5


#if (detect_object(rob) and top_left == 0 and top_center == 0 and top_right == 0 and bottom_left == 0 and bottom_center == 0 and bottom_right == 0):
    #times_near_object1 += 10
if (controller.detect_object()):
    times_near_object += 3


if (i > 15):
    distance_travelled_in_last_15_steps = getDistance(intermediate_position[i - 15], intermediate_position[i])

    if (distance_travelled_in_last_15_steps < 0.10):
        doing_circles_penalty += 3

fitness = (140 * controller.rob.collected_food() + reward_for_seeing_object - 140 * object_hit - times_near_object - doing_circles_penalty)