weight_upper = 1
weight_lower = -1
# cross two individuals with probability CXPB
CXPB = 0.8
# mutate an individual with probability MUTPB
MUTPB = 0.2
# mu: Mean or :term:`python:sequence` of means for the gaussian addition mutation.
MU = 0
# sigma: Standard deviation or :term:`python:sequence` of standard deviations for the gaussian addition mutation.
SIGMA = 0.1
# indpb: Independent probability for each attribute to be mutated.
INDPB = 0.1
# tournsize: The number of individuals participating in each tournament.
TOURNSIZE = 8
###########
# DO NOT CHANGE
###########
NGEN = 15
npop = 40
RUNS = 5

n_hidden_neurons = 10
controller = robotController(n_hidden_neurons)
number_of_sensors = 14
# left wheel and right wheel
number_of_actions = 2


if (rob.check_for_collision()):
    object_hit = 1
    # stop the simulation ones an object is hit
    print('Object is hit')
    break

if top_left == 1 or top_right == 1:
    reward_for_seeing_object += 1

if bottom_left == 1 or bottom_right == 1:
    reward_for_seeing_object += 4

if top_center == 1:
    reward_for_seeing_object += 2

if bottom_center == 1:
    reward_for_seeing_object += 5

if top_left == 0 and top_center == 0 and top_right == 0 and bottom_left == 0 and bottom_center == 0 and bottom_right == 0:
    reward_for_seeing_object -= 5

if (detect_object(rob)):
    times_near_object += 3


if (i > 15):
    distance_travelled_in_last_15_steps = getDistance(intermediate_position[i - 15], intermediate_position[i])

    if (distance_travelled_in_last_15_steps < 0.10):

        doing_circles_penalty += 3


fitness = (100 * rob.collected_food() + reward_for_seeing_object - 140 * object_hit - times_near_object - doing_circles_penalty)